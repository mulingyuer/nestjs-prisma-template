import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.ntVCDD8b.js";const c=JSON.parse('{"title":"错误异常处理","description":"","frontmatter":{},"headers":[],"relativePath":"core-features/error-handling.md","filePath":"core-features/error-handling.md"}'),p={name:"core-features/error-handling.md"},l=n(`<h1 id="错误异常处理" tabindex="-1">错误异常处理 <a class="header-anchor" href="#错误异常处理" aria-label="Permalink to &quot;错误异常处理&quot;">​</a></h1><p>在后端框架的设计中，错误处理通常采用 throw 抛出错误对象的方式。然后，错误对象会被全局异常捕获器捕获，并处理成统一的返回格式，再返回给客户端。</p><p>以 Koa 为例，它的洋葱模型通过在最外层的中间件捕获错误，实现统一的错误处理和响应。</p><p>同样，在 NestJS 中，也提供了统一的错误处理机制。我们可以通过全局异常过滤器来处理全局错误，确保应用程序的错误响应格式一致。</p><h2 id="nestjs有哪些预制错误类" tabindex="-1">NestJS有哪些预制错误类？ <a class="header-anchor" href="#nestjs有哪些预制错误类" aria-label="Permalink to &quot;NestJS有哪些预制错误类？&quot;">​</a></h2><p>NestJS提供了一些预制的错误类，了解它们可以帮助我们在合适的场景下使用。</p><p>我之前写了一篇文章 <a href="https://www.mulingyuer.com/archives/973/" target="_blank" rel="noreferrer">《Nestjs 预设的错误类大全》</a>，想了解的同学可以参考一下。</p><h2 id="全局异常过滤器" tabindex="-1">全局异常过滤器 <a class="header-anchor" href="#全局异常过滤器" aria-label="Permalink to &quot;全局异常过滤器&quot;">​</a></h2><p>我已经封装了一个全局异常过滤器，可以帮助我们处理全局的错误。</p><p>过滤器路径：<code>src\\common\\filters\\http-exception\\http-exception.filter.ts</code></p><p>异常过滤器在<code>shared</code>模块中进行了全局注册，shared模块最终会在<code>AppModule</code>中注册。</p><p><strong>目前它特殊处理了以下几种错误：</strong></p><ol><li>NestJS 自带的 <code>HttpException</code></li><li>Prisma 数据库错误</li><li>自定义code错误类 <code>CodeHttpException</code></li></ol><p>需要注意的是，部分第三方插件可能会抛出自己的错误类，如果你想自定义message，可以就得像下面这样写：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">let</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> message</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;"> exception</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">message</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> ??</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;Internal Server Error&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#A0A1A7;--shiki-dark-font-style:italic;--shiki-light-font-style:italic;">// 文件大小超出限制</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">message</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">includes</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;File too large&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)) {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">  message</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;文件大小超出限制&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>你可以通过判断错误信息，或者判断是否是某种类型的错误，来自定义错误信息。</p><p>自定义错误信息还是有些必要的，因为默认的错误信息可能不够友好，或者不够详细。</p><p>最终从错误对象提取的信息，会作为参数传递给<code>Result.fail()</code>静态方法，生成统一的错误响应对象。</p><h2 id="效果测试" tabindex="-1">效果测试 <a class="header-anchor" href="#效果测试" aria-label="Permalink to &quot;效果测试&quot;">​</a></h2><p>我们可以在NestJS的控制器或者服务中抛出错误，来测试一下全局异常过滤器的效果。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#A0A1A7;--shiki-dark-font-style:italic;--shiki-light-font-style:italic;">// app.controller.ts</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">BadRequestException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">Controller</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">Get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;@nestjs/common&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">AppService</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;./app.service&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">Public</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;@/common/decorators&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">@</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Controller</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">export</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> AppController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> constructor</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">private</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> readonly</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> appService</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> AppService</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> @</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> @</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Public</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> getHello</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> string</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  throw</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> new</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> BadRequestException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;测试异常&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  return</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">appService</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">getHello</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>然后我们访问这个控制器接口，会返回一个统一的错误响应：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  &quot;data&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#D19A66;--shiki-light:#0184BC;">null</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  &quot;message&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;测试异常&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  &quot;code&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">400</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>非自定义code错误类，它的code默认就是响应头的status，比如<code>BadRequestException</code>的status就是400。</p><h2 id="自定义错误类" tabindex="-1">自定义错误类 <a class="header-anchor" href="#自定义错误类" aria-label="Permalink to &quot;自定义错误类&quot;">​</a></h2><p>如果你频繁的抛出一些相同内容的错误，比如固定message内容的错误，没必要每次都new一个<code>HttpException</code>，可以自定义一个错误类固定message内容，然后抛出这个类。</p><p>我们在文件：<code>src\\shared\\custom-http-exception\\index.ts</code> 中就可以export抛出自定义错误类。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">HttpException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">HttpStatus</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;@nestjs/common&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;   </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">export</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> TestException</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> HttpException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  constructor</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">message</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> string</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;测试异常&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    super</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">message</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">HttpStatus</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#986801;">BAD_REQUEST</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>定义好后就可以在控制器或者服务中抛出这个类，然后全局异常过滤器就会处理这个错误。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#A0A1A7;--shiki-dark-font-style:italic;--shiki-light-font-style:italic;">// app.controller.ts</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">BadRequestException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">Controller</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">Get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;@nestjs/common&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">AppService</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;./app.service&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">Public</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;@/common/decorators&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">TestException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;@/shared/custom-http-exception&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">@</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Controller</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">export</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> AppController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> constructor</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">private</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> readonly</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;"> appService</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> AppService</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> @</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> @</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">Public</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> getHello</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> string</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  throw</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> new</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> TestException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">();</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="自定code错误类" tabindex="-1">自定code错误类 <a class="header-anchor" href="#自定code错误类" aria-label="Permalink to &quot;自定code错误类&quot;">​</a></h2><p>如果你需要自定义code错误类，比如40001代表用户不存在，40002代表密码错误，可以像下面这样定义：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">CodeHttpException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;@common/http-exception&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">export</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> UserNotExistException</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> CodeHttpException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  constructor</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">message</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> string</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;用户不存在&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    super</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">40001</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">HttpStatus</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#986801;">BAD_REQUEST</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">message</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">export</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> PasswordErrorException</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> extends</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> CodeHttpException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">  constructor</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">message</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;">:</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0184BC;"> string</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &quot;密码错误&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    super</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">40002</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">HttpStatus</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#986801;">BAD_REQUEST</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">message</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>所有的自定义code类必须继承自<code>CodeHttpException</code>，然后在构造函数中传入code、status、message。</p><h2 id="扩展错误类" tabindex="-1">扩展错误类 <a class="header-anchor" href="#扩展错误类" aria-label="Permalink to &quot;扩展错误类&quot;">​</a></h2><p>如果你还有更复杂的错误处理需求，比如深度定制错误类，常见的做法就是声明一个父类，然后所有的业务错误都继承这个父类，这样我们就可以在错误过滤器中通过<code>instanceof</code>来判断错误类型，做针对性的处理。</p><p>比如项目中的自定义code错误类就是声明在<code>src\\common\\http-exception</code>中，具体的业务类则声明在<code>src\\shared\\custom-http-exception</code>，这样可以让代码更加清晰。</p>`,37),t=[l];function e(h,k,r,d,B,A){return a(),i("div",null,t)}const g=s(p,[["render",e]]);export{c as __pageData,g as default};
